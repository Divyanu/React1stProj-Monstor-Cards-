{"version":3,"sources":["components/card/card.component.js","components/card-list/card-list.component.js","components/search-box/search-box.component.js","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","alt","src","monster","id","name","email","CardList","monsters","map","SearchBox","placeholder","handleChange","type","onChange","App","e","setState","searchField","target","value","state","fetch","then","response","json","users","this","filteredMonsters","filter","toLowerCase","includes","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"ySAIaA,EAAO,SAAAC,GAAK,OACrB,sBAAKC,UAAY,iBAAjB,UACI,qBACIC,IAAM,UACNC,IAAG,+BAA4BH,EAAMI,QAAQC,GAA1C,4BACP,mCAAML,EAAMI,QAAQE,KAApB,OACA,kCAAKN,EAAMI,QAAQG,MAAnB,WCJKC,G,MAAW,SAAAR,GAAK,OAEzB,qBAAKC,UAAU,YAAf,SAEQD,EAAMS,SAASC,KAAI,SAAAN,GAAO,OAC1B,cAAC,EAAD,CAAuBA,QAASA,GAArBA,EAAQC,WCPlBM,G,YAAY,SAAC,GAAD,IAAGC,EAAH,EAAGA,YAAaC,EAAhB,EAAgBA,aAAhB,OACrB,uBACIZ,UAAY,SACZa,KAAO,SACPF,YAAeA,EACfG,SAAUF,MC0CHG,E,kDA1Cb,aACC,IAAD,8BACE,gBAeFH,aAAe,SAACI,GAEd,EAAKC,SAAS,CAAEC,YAAaF,EAAEG,OAAOC,SAhBtC,EAAKC,MAAQ,CACXb,SAAU,GACVU,YAAa,IAJjB,E,qDASA,WACC,IAAD,OACEI,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKT,SAAS,CAACT,SAAUkB,S,oBAQ1C,WACC,IAAD,EACoCC,KAAKN,MAA/Bb,EADV,EACUA,SAAUU,EADpB,EACoBA,YACZU,EAAmBpB,EAASqB,QAAQ,SAAA1B,GAAO,OAC/CA,EAAQE,KAAKyB,cAAcC,SAASb,EAAYY,kBAGlD,OACE,sBAAK9B,UAAU,MAAf,UACE,iDACF,cAAC,EAAD,CACEW,YAAa,kBACbC,aAAgBe,KAAKf,eAErB,cAAC,EAAD,CAAUJ,SAAUoB,W,GArCVI,aCIHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBZ,MAAK,YAAkD,IAA/Ca,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.a6a6e3bf.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nimport './card.styles.css';\r\n\r\nexport const Card = props => (\r\n    <div className = 'card-container'>\r\n        <img \r\n            alt = 'monster'\r\n            src = {`https://robohash.org/${props.monster.id}?set=set2&size=180x180`}/>\r\n        <h2> {props.monster.name} </h2>\r\n        <p> {props.monster.email} </p>\r\n    </div>\r\n);\r\n","import React from 'react';\r\n\r\nimport {Card} from '../card/card.component';\r\n\r\nimport './card-list.styles.css';\r\n\r\nexport const CardList = props => \r\n(\r\n    <div className='card-list'>\r\n        {\r\n            props.monsters.map(monster => (\r\n            <Card key={monster.id} monster={monster}/>))\r\n      }\r\n    </div>\r\n);\r\n ","import React from 'react';\r\n\r\nimport './search-box.style.css';\r\n\r\nexport const SearchBox = ({ placeholder, handleChange }) => (\r\n    <input\r\n        className = 'search'\r\n        type = 'search'\r\n        placeholder = {placeholder}\r\n        onChange={handleChange}\r\n      />\r\n);\r\n","import React,{Component} from 'react';\n\nimport { CardList } from './components/card-list/card-list.component';\n\nimport './App.css';\n\nimport { SearchBox } from './components/search-box/search-box.component';\n\nclass App extends Component {\n  constructor()\n  {\n    super();\n    this.state = {\n      monsters: [],\n      searchField: ''\n    };\n  }\n\n  \n  componentDidMount()\n  {\n    fetch('https://jsonplaceholder.typicode.com/users')\n    .then(response => response.json())\n    .then(users => this.setState({monsters: users}));\n  }\n\n  handleChange = (e) => \n  {\n    this.setState({ searchField: e.target.value })\n  }\n\n  render()\n  {\n    const { monsters, searchField } = this.state;\n    const filteredMonsters = monsters.filter( monster =>\n      monster.name.toLowerCase().includes(searchField.toLowerCase())\n      );\n    \n    return (\n      <div className='App'>\n        <h1>Monster Rolodex</h1>\n      <SearchBox\n        placeholder ='search monsters'\n        handleChange = {this.handleChange}\n      />\n        <CardList monsters={filteredMonsters}/>\n      </div>\n    );\n    }\n  }\n  \nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}